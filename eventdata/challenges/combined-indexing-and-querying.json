{
  "name": "combined-indexing-and-querying",
  "description": "This challenge simulates a set of Kibana queries against historical data (elasticlogs_q-* indices) as well as against the most recent data currently being indexed. It combined this with rate-limited indexing at varying levels. It assumes one of the challenges creating elasticlogs_q-* indices has been run.",
  "meta": {
    "benchmark_type": "indexing/querying",
    "target_kibana_queries_per_minute": 7
  },
  "schedule": [
    {
      "operation": "deleteindex_elasticlogs_i-*"
    },
    {
      "operation": "fieldstats_elasticlogs_q-*_ELASTICLOGS"
    },
    {
      "operation": "relative-kibana-content_issues-dashboard_75%",
      "warmup-iterations": 0,
      "iterations": 200,
      "meta": {
        "query_type": "warmup"
      }
    },
    {
      "operation": "relative-kibana-content_issues-dashboard_50%",
      "target-interval": 60,
      "warmup-time-period": 0,
      "time-period": {{ rate_limit_duration_secs }},
      "meta": {
        "target_indexing_rate": 0,
        "query_type": "historic"
      }
    },
    {
      "operation": "create_elasticlogs_i_write",
      "clients": 1,
      "warmup-iterations": 0,
      "iterations": 1
    },
    {# Add some data to index so it does not start empty #}
    {
      "operation": "index-append-1000-elasticlogs_i_write",    
      "warmup-time-period": {{ rate_limit_duration_secs }},
      "time-period": {{ rate_limit_duration_secs }},
      "target-throughput": 10,
      "clients": {{ clients }}
    },
    {% for ops in rate_limit_ops %}
    {% set rate = ops * 1000 %}
    {
      "parallel": {
        "warmup-time-period": 0,
        "time-period": {{ rate_limit_duration_secs }},
        "tasks": [
          {
            "name": "index-append-1000-elasticlogs_i_write-{{rate}}",
            "operation": "index-append-1000-elasticlogs_i_write",
            "target-throughput": {{ ops }},
            "clients": {{ clients }},
            "meta": {
              "target_indexing_rate": {{ rate }}
            }
          },
          {
            "name": "rollover_elasticlogs_i_write_50M-{{rate}}",
            "operation": "rollover_elasticlogs_i_write_50M",
            "target-interval": 20
          },
          {
            "name": "current-kibana-traffic-dashboard_30m-{{rate}}",
            "operation": "current-kibana-traffic-dashboard_30m",
            "target-interval": 60,
            "meta": {
              "target_indexing_rate": {{ rate }},
              "query_type": "current"
            }
          },
          { 
            "name": "current-kibana-content_issues-dashboard_30m-{{rate}}",
            "operation": "current-kibana-content_issues-dashboard_30m",
            "target-interval": 60,
            "meta": {
              "target_indexing_rate": {{ rate }},
              "query_type": "current"
            }
          },
          { 
            "name": "current-kibana-traffic-dashboard_15m-{{rate}}",
            "operation": "current-kibana-traffic-dashboard_15m",
            "target-interval": 30,
            "clients": 2,
            "meta": {
              "target_indexing_rate": {{ rate }},
              "query_type": "current"
            }
          },
          {
            "name": "current-kibana-content_issues-dashboard_15m-{{rate}}",
            "operation": "current-kibana-content_issues-dashboard_15m",
            "target-interval": 30,
            "clients": 2,
            "meta": {
              "target_indexing_rate": {{ rate }},
              "query_type": "current"
            }
          },
          {
            "name": "relative-kibana-content_issues-dashboard_50%-{{rate}}",
            "operation": "relative-kibana-content_issues-dashboard_50%",
            "target-interval": 60,
            "meta": {
              "target_indexing_rate": {{ rate }},
              "query_type": "historic"
            }
          }
        ]
      }
    },
    {% endfor %}
    {
      "operation": "indicesstats_elasticlogs_i-*",
      "iterations": 1
    }
  ]
}